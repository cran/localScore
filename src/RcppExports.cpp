// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// daudin
double daudin(int localScore, int sequence_length, NumericVector score_probabilities, int sequence_min, int sequence_max);
RcppExport SEXP _localScore_daudin(SEXP localScoreSEXP, SEXP sequence_lengthSEXP, SEXP score_probabilitiesSEXP, SEXP sequence_minSEXP, SEXP sequence_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type localScore(localScoreSEXP);
    Rcpp::traits::input_parameter< int >::type sequence_length(sequence_lengthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type score_probabilities(score_probabilitiesSEXP);
    Rcpp::traits::input_parameter< int >::type sequence_min(sequence_minSEXP);
    Rcpp::traits::input_parameter< int >::type sequence_max(sequence_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(daudin(localScore, sequence_length, score_probabilities, sequence_min, sequence_max));
    return rcpp_result_gen;
END_RCPP
}
// karlin
double karlin(int localScore, int sequence_length, NumericVector score_probabilities, int sequence_min, int sequence_max);
RcppExport SEXP _localScore_karlin(SEXP localScoreSEXP, SEXP sequence_lengthSEXP, SEXP score_probabilitiesSEXP, SEXP sequence_minSEXP, SEXP sequence_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type localScore(localScoreSEXP);
    Rcpp::traits::input_parameter< int >::type sequence_length(sequence_lengthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type score_probabilities(score_probabilitiesSEXP);
    Rcpp::traits::input_parameter< int >::type sequence_min(sequence_minSEXP);
    Rcpp::traits::input_parameter< int >::type sequence_max(sequence_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(karlin(localScore, sequence_length, score_probabilities, sequence_min, sequence_max));
    return rcpp_result_gen;
END_RCPP
}
// mcc
double mcc(int localScore, int sequence_length, NumericVector score_probabilities, int sequence_min, int sequence_max);
RcppExport SEXP _localScore_mcc(SEXP localScoreSEXP, SEXP sequence_lengthSEXP, SEXP score_probabilitiesSEXP, SEXP sequence_minSEXP, SEXP sequence_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type localScore(localScoreSEXP);
    Rcpp::traits::input_parameter< int >::type sequence_length(sequence_lengthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type score_probabilities(score_probabilitiesSEXP);
    Rcpp::traits::input_parameter< int >::type sequence_min(sequence_minSEXP);
    Rcpp::traits::input_parameter< int >::type sequence_max(sequence_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(mcc(localScore, sequence_length, score_probabilities, sequence_min, sequence_max));
    return rcpp_result_gen;
END_RCPP
}
// stationary_distribution
NumericVector stationary_distribution(NumericMatrix m);
RcppExport SEXP _localScore_stationary_distribution(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(stationary_distribution(m));
    return rcpp_result_gen;
END_RCPP
}
// exact_mc
double exact_mc(NumericMatrix m, int localScore, long sequence_length, int sequence_min, int sequence_max);
RcppExport SEXP _localScore_exact_mc(SEXP mSEXP, SEXP localScoreSEXP, SEXP sequence_lengthSEXP, SEXP sequence_minSEXP, SEXP sequence_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type localScore(localScoreSEXP);
    Rcpp::traits::input_parameter< long >::type sequence_length(sequence_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type sequence_min(sequence_minSEXP);
    Rcpp::traits::input_parameter< int >::type sequence_max(sequence_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(exact_mc(m, localScore, sequence_length, sequence_min, sequence_max));
    return rcpp_result_gen;
END_RCPP
}
// localScoreC
List localScoreC(std::vector<int> v, bool supressWarnings);
RcppExport SEXP _localScore_localScoreC(SEXP vSEXP, SEXP supressWarningsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type v(vSEXP);
    Rcpp::traits::input_parameter< bool >::type supressWarnings(supressWarningsSEXP);
    rcpp_result_gen = Rcpp::wrap(localScoreC(v, supressWarnings));
    return rcpp_result_gen;
END_RCPP
}
// localScoreC_double
List localScoreC_double(std::vector<double> v, bool supressWarnings);
RcppExport SEXP _localScore_localScoreC_double(SEXP vSEXP, SEXP supressWarningsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type v(vSEXP);
    Rcpp::traits::input_parameter< bool >::type supressWarnings(supressWarningsSEXP);
    rcpp_result_gen = Rcpp::wrap(localScoreC_double(v, supressWarnings));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_localScore_daudin", (DL_FUNC) &_localScore_daudin, 5},
    {"_localScore_karlin", (DL_FUNC) &_localScore_karlin, 5},
    {"_localScore_mcc", (DL_FUNC) &_localScore_mcc, 5},
    {"_localScore_stationary_distribution", (DL_FUNC) &_localScore_stationary_distribution, 1},
    {"_localScore_exact_mc", (DL_FUNC) &_localScore_exact_mc, 5},
    {"_localScore_localScoreC", (DL_FUNC) &_localScore_localScoreC, 2},
    {"_localScore_localScoreC_double", (DL_FUNC) &_localScore_localScoreC_double, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_localScore(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
